generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum LessonStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum LessonType {
  INDIVIDUAL
  GROUP
  WORKSHOP
  MASTERCLASS
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
  PENDING
}

enum ResourceType {
  SHEET_MUSIC
  AUDIO
  VIDEO
  DOCUMENT
  LINK
  IMAGE
  OTHER
}

enum AssignmentStatus {
  PENDING
  SUBMITTED
  COMPLETED
  LATE
  GRADED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  LESSON_REMINDER
  ASSIGNMENT
  PAYMENT
  MESSAGE
  SYSTEM
  OTHER
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  password       String
  firstName      String
  lastName       String
  role           Role      @default(STUDENT)
  phone          String?
  profileImageUrl String?
  resetPasswordToken String? 
  resetPasswordExpires DateTime?
  emailVerified  Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  profile        Profile?
  teacherProfile TeacherProfile?
  studentProfile StudentProfile?
  parentProfiles ParentProfile?
  teacherLessons Lesson[]  @relation("TeacherLessons")
  studentLessons LessonStudent[] @relation("StudentLessons")
  resources      Resource[] @relation("CreatedResources")
  notifications  Notification[] @relation("UserNotifications")
  assignments    Assignment[] @relation("AssignedToUser")
  createdAssignments Assignment[] @relation("CreatedByUser")
  payments       Payment[] @relation("UserPayments")
  sentMessages   Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
}

model Profile {
  id         String   @id @default(uuid())
  userId     String   @unique
  bio        String?  @db.Text
  preferences Json?
  notificationSettings Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeacherProfile {
  id              String   @id @default(uuid())
  userId          String   @unique
  specializations String[] 
  qualifications  String?  @db.Text
  hourlyRate      Decimal  @default(0) @db.Decimal(10, 2)
  availability    Json?
  bio             String?  @db.Text
  yearsExperience Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentProfile {
  id                   String   @id @default(uuid())
  userId               String   @unique
  age                  Int?
  skillLevel           String?
  primaryInstrument    String?
  secondaryInstruments String[]
  learningGoals        String?  @db.Text
  parentUserId         String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent               ParentProfile? @relation(fields: [parentUserId], references: [userId], onDelete: SetNull)
}

model ParentProfile {
  id               String   @id @default(uuid())
  userId           String   @unique
  relationship     String?
  emergencyContact String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  students         StudentProfile[]
}

model Lesson {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  startTime   DateTime
  endTime     DateTime
  location    String?
  status      LessonStatus @default(SCHEDULED)
  notes       String?  @db.Text
  teacherId   String
  lessonType  LessonType @default(INDIVIDUAL)
  recurrence  Json?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher     User     @relation("TeacherLessons", fields: [teacherId], references: [id], onDelete: Cascade)
  students    LessonStudent[]
  resources   LessonResource[]
  assignments Assignment[]
  payments    Payment[]
}

model LessonStudent {
  id           String   @id @default(uuid())
  lessonId     String
  studentId    String
  attendance   AttendanceStatus @default(PENDING)
  notes        String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  lesson       Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student      User     @relation("StudentLessons", fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([lessonId, studentId])
}

model Resource {
  id          String   @id @default(uuid())
  title       String
  description String?  @db.Text
  fileUrl     String?
  fileType    String?
  contentType ResourceType
  createdById String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  createdBy   User     @relation("CreatedResources", fields: [createdById], references: [id], onDelete: Cascade)
  lessons     LessonResource[]
  assignments Assignment[]
}

model LessonResource {
  id          String   @id @default(uuid())
  lessonId    String
  resourceId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  resource    Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([lessonId, resourceId])
}

model Assignment {
  id            String    @id @default(uuid())
  title         String
  description   String?   @db.Text
  dueDate       DateTime?
  status        AssignmentStatus @default(PENDING)
  lessonId      String?
  resourceId    String?
  assignedToId  String
  createdById   String
  feedback      String?   @db.Text
  submissionUrl String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  lesson        Lesson?   @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  resource      Resource? @relation(fields: [resourceId], references: [id], onDelete: SetNull)
  assignedTo    User      @relation("AssignedToUser", fields: [assignedToId], references: [id], onDelete: Cascade)
  createdBy     User      @relation("CreatedByUser", fields: [createdById], references: [id], onDelete: Cascade)
}

model Payment {
  id              String   @id @default(uuid())
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @default("USD")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?
  transactionId   String?
  userId          String
  lessonId        String?
  description     String?  
  paymentDate     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation("UserPayments", fields: [userId], references: [id], onDelete: Cascade)
  lesson          Lesson?  @relation(fields: [lessonId], references: [id], onDelete: SetNull)
}

model Notification {
  id          String   @id @default(uuid())
  userId      String
  title       String
  content     String?  @db.Text
  type        NotificationType
  isRead      Boolean  @default(false)
  referenceId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String
  content     String   @db.Text
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
}