// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

enum LessonType {
  PRIVATE
  GROUP
}

enum ScheduleStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum ResourceType {
  SHEET_MUSIC
  VIDEO
  AUDIO
  DOCUMENT
  OTHER
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String
  role              UserRole
  firstName         String
  lastName          String
  phone             String?
  profileImageUrl   String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relationships
  profile           Profile?
  teacherProfile    TeacherProfile?
  studentProfile    StudentProfile?
  parentStudents    StudentProfile[] @relation("ParentToStudent")
  taughtLessons     Lesson[]         @relation("TeacherLessons")
  attendances       Attendance[]
  practiceLogs      PracticeLog[]
  createdResources  Resource[]
  payments          Payment[]
  invoices          Invoice[]
  sentMessages      Message[]        @relation("MessageSender")
  receivedMessages  Message[]        @relation("MessageRecipient")
  notifications     Notification[]
}

model Profile {
  id                    String    @id @default(uuid())
  userId                String    @unique
  bio                   String?   @db.Text
  preferences           Json?
  notificationSettings  Json?
  
  // Relationships
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TeacherProfile {
  id                String    @id @default(uuid())
  userId            String    @unique
  specializations   String[]
  qualifications    String?   @db.Text
  hourlyRate        Decimal   @db.Decimal(10, 2)
  availability      Json?
  bio               String?   @db.Text
  profileImageUrl   String?
  
  // Relationships
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model StudentProfile {
  id                  String    @id @default(uuid())
  userId              String    @unique
  age                 Int?
  skillLevel          String?
  primaryInstrument   String?
  secondaryInstruments String[]
  learningGoals       String?   @db.Text
  parentUserId        String?
  
  // Relationships
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent              User?     @relation("ParentToStudent", fields: [parentUserId], references: [id])
  enrollments         Enrollment[]
  practiceLogs        PracticeLog[]
}

model Location {
  id            String    @id @default(uuid())
  name          String
  address       String?
  city          String?
  state         String?
  zip           String?
  country       String?
  isVirtual     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  
  // Relationships
  rooms         Room[]
}

model Room {
  id            String    @id @default(uuid())
  locationId    String
  name          String
  capacity      Int?
  description   String?   @db.Text
  equipment     Json?
  
  // Relationships
  location      Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  schedules     LessonSchedule[]
}

model Lesson {
  id                String        @id @default(uuid())
  teacherId         String
  lessonType        LessonType
  title             String
  description       String?       @db.Text
  durationMinutes   Int
  recurringPattern  Json?
  maxStudents       Int?
  price             Decimal       @db.Decimal(10, 2)
  isActive          Boolean       @default(true)
  
  // Relationships
  teacher           User          @relation("TeacherLessons", fields: [teacherId], references: [id])
  schedules         LessonSchedule[]
  enrollments       Enrollment[]
  resources         LessonResource[]
  invoiceItems      InvoiceItem[]
}

model LessonSchedule {
  id            String          @id @default(uuid())
  lessonId      String
  startTime     DateTime
  endTime       DateTime
  roomId        String?
  status        ScheduleStatus  @default(SCHEDULED)
  notes         String?         @db.Text
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Relationships
  lesson        Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  room          Room?           @relation(fields: [roomId], references: [id])
  instances     LessonInstance[]
}

model Enrollment {
  id              String        @id @default(uuid())
  studentId       String
  lessonId        String
  enrollmentDate  DateTime      @default(now())
  status          String        @default("active")
  paymentStatus   String        @default("pending")
  
  // Relationships
  student         StudentProfile @relation(fields: [studentId], references: [id])
  lesson          Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model LessonInstance {
  id                String      @id @default(uuid())
  scheduleId        String
  actualStartTime   DateTime?
  actualEndTime     DateTime?
  status            String      @default("scheduled")
  notes             String?     @db.Text
  
  // Relationships
  schedule          LessonSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  attendances       Attendance[]
}

model Attendance {
  id                String            @id @default(uuid())
  instanceId        String
  studentId         String
  status            AttendanceStatus
  notes             String?           @db.Text
  
  // Relationships
  instance          LessonInstance    @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  student           User              @relation(fields: [studentId], references: [id])
}

model PracticeLog {
  id                String      @id @default(uuid())
  studentId         String
  studentProfileId  String
  date              DateTime
  durationMinutes   Int
  description       String?     @db.Text
  teacherFeedback   String?     @db.Text
  createdAt         DateTime    @default(now())
  
  // Relationships
  student           User            @relation(fields: [studentId], references: [id])
  studentProfile    StudentProfile  @relation(fields: [studentProfileId], references: [id])
}

model Resource {
  id            String        @id @default(uuid())
  title         String
  description   String?       @db.Text
  type          ResourceType
  url           String?
  filePath      String?
  createdById   String
  createdAt     DateTime      @default(now())
  
  // Relationships
  createdBy     User          @relation(fields: [createdById], references: [id])
  lessons       LessonResource[]
}

model LessonResource {
  id            String      @id @default(uuid())
  lessonId      String
  resourceId    String
  assignedDate  DateTime    @default(now())
  
  // Relationships
  lesson        Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  resource      Resource    @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([lessonId, resourceId])
}

model Payment {
  id                  String          @id @default(uuid())
  studentId           String
  amount              Decimal         @db.Decimal(10, 2)
  paymentDate         DateTime
  paymentMethod       String
  status              PaymentStatus
  invoiceId           String?
  transactionReference String?
  
  // Relationships
  student             User            @relation(fields: [studentId], references: [id])
  invoice             Invoice?        @relation(fields: [invoiceId], references: [id])
}

model Invoice {
  id            String          @id @default(uuid())
  studentId     String
  issueDate     DateTime        @default(now())
  dueDate       DateTime
  totalAmount   Decimal         @db.Decimal(10, 2)
  status        InvoiceStatus   @default(DRAFT)
  notes         String?         @db.Text
  
  // Relationships
  student       User            @relation(fields: [studentId], references: [id])
  items         InvoiceItem[]
  payments      Payment[]
}

model InvoiceItem {
  id            String    @id @default(uuid())
  invoiceId     String
  lessonId      String?
  description   String
  quantity      Int
  unitPrice     Decimal   @db.Decimal(10, 2)
  totalPrice    Decimal   @db.Decimal(10, 2)
  
  // Relationships
  invoice       Invoice   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  lesson        Lesson?   @relation(fields: [lessonId], references: [id])
}

model Message {
  id                String    @id @default(uuid())
  senderId          String
  recipientId       String
  content           String    @db.Text
  sentAt            DateTime  @default(now())
  readAt            DateTime?
  parentMessageId   String?
  
  // Relationships
  sender            User      @relation("MessageSender", fields: [senderId], references: [id])
  recipient         User      @relation("MessageRecipient", fields: [recipientId], references: [id])
  parentMessage     Message?  @relation("MessageThread", fields: [parentMessageId], references: [id])
  replies           Message[] @relation("MessageThread")
}

model Notification {
  id                String    @id @default(uuid())
  userId            String
  type              String
  content           String    @db.Text
  createdAt         DateTime  @default(now())
  readAt            DateTime?
  relatedEntityType String?
  relatedEntityId   String?
  
  // Relationships
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}